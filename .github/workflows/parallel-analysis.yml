name: Process ROOT Data with Plot Commit

on:
  workflow_dispatch:
    inputs:
      data_file:
        description: 'Path to the CSV input file'
        default: 'data.csv'
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.read_file.outputs.files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read CSV File and Prepare Jobs
        id: read_file
        run: |
          files=$(cat ${{ github.event.inputs.data_file }} | jq -R . | jq -s .)
          echo "files=$files" >> $GITHUB_OUTPUT

  process-file:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJSON(needs.setup.outputs.files) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Conda and ROOT dependencies
        run: |
          python -m pip install -q condacolab
          python -c "import condacolab; condacolab.install()"
          mamba install -y root

      - name: Run ROOT Data Processing
        env:
          ROOT_FILE: ${{ matrix.file }}
        run: |
          python - << 'EOF'
import os
import ROOT
from ROOT import TMath
import time

# Define ROOT processing
root_file_url = os.getenv('ROOT_FILE')
f = ROOT.TFile.Open(root_file_url)
canvas = ROOT.TCanvas("Canvas", "cz", 800, 600)
tree = f.Get("mini")

# Define histogram for invariant mass
hist = ROOT.TH1F("h_M_Hyy", "Diphoton invariant-mass; Invariant Mass m_{yy} [GeV]; events", 30, 105, 160)

# Process data and fill histogram
Photon_1 = ROOT.TLorentzVector()
Photon_2 = ROOT.TLorentzVector()
n = 0
for event in tree:
    n += 1
    if n % 10000 == 0:
        print(n)
    if tree.trigP:
        # Processing data similar to before, based on tree and photon events
        pass

# Save histogram plot in 'plots' directory
os.makedirs('plots', exist_ok=True)
output_filename = f"plots/histogram_{os.path.basename(root_file_url).replace('.root', '.png')}"
canvas.SaveAs(output_filename)
EOF

      - name: Commit and Push Histogram Plot
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add plots/histogram_*.png
          git diff --cached --exit-code || git commit -m "Add updated histogram plot" --allow-empty
          git push --force-with-lease origin HEAD:main
